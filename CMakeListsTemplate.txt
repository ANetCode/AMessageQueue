# 最低要求版本
cmake_minimum_required (VERSION 2.8)

message(STATUS " ================= [${PROJECT_NAME}] ================= ")
# include_sub_directories_recursively ("${PROJECT_SOURCE_DIR}/include")
# # inc dir
# foreach(m ${CUSTOM_MODULE_DEP})
#     message("Include Files Dep module: ${CMAKE_SOURCE_DIR}/${m}")
#     include_sub_directories_recursively ("${CMAKE_SOURCE_DIR}/${m}/include")
# endforeach()
# # src
# set(SUB_SOURCES "")
# foreach(m ${CUSTOM_SOURCE_DIR})
#     message("source dir: ${PROJECT_SOURCE_DIR}/${m}")
#     aux_source_directory(${m} SUB_SOURCES)
#     set(SOURCE
#       ${SOURCE}
#       ${SUB_SOURCES}
#       PARENT_SCOPE
#     )
# endforeach()
# # lib or exec
# if(${IS_LIBRARY})
#   set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "lib/")
#   add_library(${PROJECT_NAME} ${SUB_SOURCES})

#   # export link dep
#   foreach(m ${CUSTOM_MODULE_DEP})
#         add_dependencies(${PROJECT_NAME} ${m})
#         set(${PROJECT_NAME}_DEP
#           ${PROJECT_NAME}_DEP
#           ${m}
#           PARENT_SCOPE
#         )
#         message("export link dep ${PROJECT_NAME} => ${m}")
#   endforeach()

# else()
#   add_executable(${PROJECT_NAME} ${SUB_SOURCES})
#   #link
#   foreach(m ${CUSTOM_MODULE_DEP})
#         message("Link Lib Dep module: ${m}")
#         target_link_libraries(${PROJECT_NAME} ${m})
#         add_dependencies(${PROJECT_NAME} ${m})
#         foreach(d ${${m}_DEP})
#           if(NOT ${d} MATCHES ${m}_DEP)
#             message("get link Lib Dep more by module: [${m}] =>  ${d}")
#             target_link_libraries(${PROJECT_NAME} ${d})
#           endif()
#         endforeach()
#   endforeach()

#   # 3rd
#   foreach(m ${CUSTOM_3RD_MODULE_DEP})
#         message("Link 3rd Lib Dep module: ${m}")
#         target_link_libraries(${PROJECT_NAME} ${m})
#         add_dependencies(${PROJECT_NAME} ${m})
#         foreach(d ${${m}_DEP})
#           if(NOT ${d} MATCHES ${m}_DEP)
#             message("get link Lib Dep more by module: [${m}] =>  ${d}")
#             target_link_libraries(${PROJECT_NAME} ${d})
#           endif()
#         endforeach()
#   endforeach()

# endif()

# 自动添加 include 目录
function(include_sub_directories_recursively root_inc_dir)
#    if (IS_DIRECTORY ${root_inc_dir})
#        message("include dir: " ${root_inc_dir})
#        include_directories(${root_inc_dir})
#    endif()

#    file(GLOB ALL_SUB RELATIVE ${root_inc_dir} ${root_inc_dir}/*)
#    foreach(sub ${ALL_SUB})
#        if (IS_DIRECTORY ${root_inc_dir}/${sub})
#            include_sub_directories_recursively(${root_inc_dir}/${sub})
#        endif()
#    endforeach()
include_directories(${root_inc_dir})
endfunction()

# 自动添加 文件 (递归)
#function(source_sub_directories_recursively root_src_dir)
#    file(GLOB_RECURSE ALL_CUR_SRC_FILES ${root_src_dir})
#    set (ALL_SRC_FILES "${ALL_CUR_SRC_FILES}" PARENT_SCOPE)
#    message("66666 ${root_src_dir} ${ALL_SRC_FILES}")
#endfunction()

function(source_sub_directories_recursively root_inc_dir)
    if (IS_DIRECTORY ${root_inc_dir})
            aux_source_directory(${root_inc_dir} SUB_SOURCES)
            set(SOURCE
              ${SOURCE}
              ${SUB_SOURCES}
              PARENT_SCOPE
            )
    endif()

    file(GLOB ALL_SUB RELATIVE ${root_inc_dir} ${root_inc_dir}/*)
    foreach(sub ${ALL_SUB})
        if (IS_DIRECTORY ${root_inc_dir}/${sub})
            source_sub_directories_recursively(${root_inc_dir}/${sub})
        endif()
    endforeach()
    set(ALL_SOURCE
        ${SOURCE}
        ""
        PARENT_SCOPE
    )
endfunction()


include(CheckIncludeFile)
include(CheckIncludeFileCXX)
include(CheckIncludeFiles)
include(ExternalProject)
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()



foreach(m ${CUSTOM_MODULE_DEP})
     message("Include Files Dep module: ${CMAKE_SOURCE_DIR}/build/${m}")
     include_sub_directories_recursively ("${CMAKE_SOURCE_DIR}/build/${m}/include")
endforeach()

# Include files

set(ALL_SOURCE "")
include_sub_directories_recursively ("${PROJECT_SOURCE_DIR}/include")
source_sub_directories_recursively ("${PROJECT_SOURCE_DIR}/src")